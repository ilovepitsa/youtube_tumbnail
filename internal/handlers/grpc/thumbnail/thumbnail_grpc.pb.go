// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: internal/handlers/grpc/thumbnail/thumbnail.proto

package thumbnail

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Thumbnails_GetThumbnail_FullMethodName       = "/thumbnail.Thumbnails/GetThumbnail"
	Thumbnails_GetThumbnailsAsync_FullMethodName = "/thumbnail.Thumbnails/GetThumbnailsAsync"
)

// ThumbnailsClient is the client API for Thumbnails service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThumbnailsClient interface {
	GetThumbnail(ctx context.Context, in *ThumbnailRequest, opts ...grpc.CallOption) (*ThumbnailResponce, error)
	GetThumbnailsAsync(ctx context.Context, opts ...grpc.CallOption) (Thumbnails_GetThumbnailsAsyncClient, error)
}

type thumbnailsClient struct {
	cc grpc.ClientConnInterface
}

func NewThumbnailsClient(cc grpc.ClientConnInterface) ThumbnailsClient {
	return &thumbnailsClient{cc}
}

func (c *thumbnailsClient) GetThumbnail(ctx context.Context, in *ThumbnailRequest, opts ...grpc.CallOption) (*ThumbnailResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThumbnailResponce)
	err := c.cc.Invoke(ctx, Thumbnails_GetThumbnail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbnailsClient) GetThumbnailsAsync(ctx context.Context, opts ...grpc.CallOption) (Thumbnails_GetThumbnailsAsyncClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Thumbnails_ServiceDesc.Streams[0], Thumbnails_GetThumbnailsAsync_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &thumbnailsGetThumbnailsAsyncClient{ClientStream: stream}
	return x, nil
}

type Thumbnails_GetThumbnailsAsyncClient interface {
	Send(*ThumbnailRequest) error
	Recv() (*ThumbnailResponce, error)
	grpc.ClientStream
}

type thumbnailsGetThumbnailsAsyncClient struct {
	grpc.ClientStream
}

func (x *thumbnailsGetThumbnailsAsyncClient) Send(m *ThumbnailRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *thumbnailsGetThumbnailsAsyncClient) Recv() (*ThumbnailResponce, error) {
	m := new(ThumbnailResponce)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ThumbnailsServer is the server API for Thumbnails service.
// All implementations must embed UnimplementedThumbnailsServer
// for forward compatibility
type ThumbnailsServer interface {
	GetThumbnail(context.Context, *ThumbnailRequest) (*ThumbnailResponce, error)
	GetThumbnailsAsync(Thumbnails_GetThumbnailsAsyncServer) error
	mustEmbedUnimplementedThumbnailsServer()
}

// UnimplementedThumbnailsServer must be embedded to have forward compatible implementations.
type UnimplementedThumbnailsServer struct {
}

func (UnimplementedThumbnailsServer) GetThumbnail(context.Context, *ThumbnailRequest) (*ThumbnailResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThumbnail not implemented")
}
func (UnimplementedThumbnailsServer) GetThumbnailsAsync(Thumbnails_GetThumbnailsAsyncServer) error {
	return status.Errorf(codes.Unimplemented, "method GetThumbnailsAsync not implemented")
}
func (UnimplementedThumbnailsServer) mustEmbedUnimplementedThumbnailsServer() {}

// UnsafeThumbnailsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThumbnailsServer will
// result in compilation errors.
type UnsafeThumbnailsServer interface {
	mustEmbedUnimplementedThumbnailsServer()
}

func RegisterThumbnailsServer(s grpc.ServiceRegistrar, srv ThumbnailsServer) {
	s.RegisterService(&Thumbnails_ServiceDesc, srv)
}

func _Thumbnails_GetThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbnailsServer).GetThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thumbnails_GetThumbnail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbnailsServer).GetThumbnail(ctx, req.(*ThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thumbnails_GetThumbnailsAsync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ThumbnailsServer).GetThumbnailsAsync(&thumbnailsGetThumbnailsAsyncServer{ServerStream: stream})
}

type Thumbnails_GetThumbnailsAsyncServer interface {
	Send(*ThumbnailResponce) error
	Recv() (*ThumbnailRequest, error)
	grpc.ServerStream
}

type thumbnailsGetThumbnailsAsyncServer struct {
	grpc.ServerStream
}

func (x *thumbnailsGetThumbnailsAsyncServer) Send(m *ThumbnailResponce) error {
	return x.ServerStream.SendMsg(m)
}

func (x *thumbnailsGetThumbnailsAsyncServer) Recv() (*ThumbnailRequest, error) {
	m := new(ThumbnailRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Thumbnails_ServiceDesc is the grpc.ServiceDesc for Thumbnails service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Thumbnails_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thumbnail.Thumbnails",
	HandlerType: (*ThumbnailsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetThumbnail",
			Handler:    _Thumbnails_GetThumbnail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetThumbnailsAsync",
			Handler:       _Thumbnails_GetThumbnailsAsync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/handlers/grpc/thumbnail/thumbnail.proto",
}
